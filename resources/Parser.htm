<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<!--NewPage-->
<HTML>
<HEAD><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated by javadoc on Fri Nov 20 18:09:34 PST 1998 -->
<TITLE>
XML Parser for Java API: Class  Parser
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../api.css" TITLE="Style">
</HEAD>
<BODY BGCOLOR="white">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" ID="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT ID="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="package-summary.html"><FONT ID="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" ID="NavBarCell1Rev"> &nbsp;<FONT ID="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="package-tree.html"><FONT ID="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT ID="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT ID="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT ID="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
XML Parser for Java 1.1.9</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" ID="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/ibm/xml/parser/Parent.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/ibm/xml/parser/PseudoNode.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" ID="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Parser.html" TARGET="_top"><B>NO FRAMES</B></A></FONT></TD>
</TR>
<TR>
<TD VALIGN="top" ID="NavBarCell3"><FONT SIZE="-2">
  SUMMARY: &nbsp;INNER&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" ID="NavBarCell3"><FONT SIZE="-2">
DETAIL: &nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.ibm.xml.parser</FONT>
<BR>
Class  Parser</H2>
<PRE>
java.lang.Object
  |
  +--<B>com.ibm.xml.parser.Parser</B>
</PRE>
<HR>
<DL>
<DT>public class <B>Parser</B><DT>extends java.lang.Object</DL>

<P>
Parser is the XML4J parser that examines an XML document and generates an object tree
 of Document Object Model (DOM) Nodes.  Details of these Nodes are provided by the
 references below.
<P>
<DL>
<DT><B>Version: </B><DD>Revision: 17 1.41 src/com/ibm/xml/parser/Parser.java, xml4jsrc, xml4j-jtcsv, xml4j_1_1_9</DD>
<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/TXDocument.html"><CODE>TXDocument</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXElement.html"><CODE>TXElement</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXText.html"><CODE>TXText</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXComment.html"><CODE>TXComment</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXPI.html"><CODE>TXPI</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/StylesheetPI.html"><CODE>StylesheetPI</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXCDATASection.html"><CODE>TXCDATASection</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXNotation.html"><CODE>TXNotation</CODE></A>, 
<CODE>TXAttributeList</CODE>, 
<A HREF="../../../../com/ibm/xml/parser/TXAttribute.html"><CODE>TXAttribute</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/DTD.html"><CODE>DTD</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/ElementDecl.html"><CODE>ElementDecl</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Attlist.html"><CODE>Attlist</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/AttDef.html"><CODE>AttDef</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/EntityDecl.html"><CODE>EntityDecl</CODE></A></DL>
<HR>

<P>
<!-- ======== INNER CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->


<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" ID="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#Parser(java.lang.String)">Parser</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor when using the default <code>ErrorListener</code> and <code>StreamProducer</code>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#Parser(java.lang.String, com.ibm.xml.parser.ErrorListener, com.ibm.xml.parser.StreamProducer)">Parser</A></B>(java.lang.String&nbsp;name,
       <A HREF="../../../../com/ibm/xml/parser/ErrorListener.html">ErrorListener</A>&nbsp;errorListener,
       <A HREF="../../../../com/ibm/xml/parser/StreamProducer.html">StreamProducer</A>&nbsp;streamProducer)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor when NOT using the default <CODE>ErrorListener</CODE> or <CODE>StreamProducer</CODE>.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" ID="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#addElementHandler(com.ibm.xml.parser.ElementHandler)">addElementHandler</A></B>(<A HREF="../../../../com/ibm/xml/parser/ElementHandler.html">ElementHandler</A>&nbsp;elementHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a handler for receiving control when ANY element tag is recognized by this
 parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#addElementHandler(com.ibm.xml.parser.ElementHandler, java.lang.String)">addElementHandler</A></B>(<A HREF="../../../../com/ibm/xml/parser/ElementHandler.html">ElementHandler</A>&nbsp;elementHandler,
                  java.lang.String&nbsp;elementTagName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a handler for receiving control when the specified <var>elementTagName</var>
 element tag is recognized by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#addNoRequiredAttributeHandler(com.ibm.xml.parser.NoRequiredAttributeHandler)">addNoRequiredAttributeHandler</A></B>(<A HREF="../../../../com/ibm/xml/parser/NoRequiredAttributeHandler.html">NoRequiredAttributeHandler</A>&nbsp;noRequiredAttributeHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a handler for receiving control when a "no required attribute" event is 
 recognized by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#addPIHandler(com.ibm.xml.parser.PIHandler)">addPIHandler</A></B>(<A HREF="../../../../com/ibm/xml/parser/PIHandler.html">PIHandler</A>&nbsp;piHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a handler for receiving control when PIs are recognized by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#addPreRootHandler(com.ibm.xml.parser.PreRootHandler)">addPreRootHandler</A></B>(<A HREF="../../../../com/ibm/xml/parser/PreRootHandler.html">PreRootHandler</A>&nbsp;preRootHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a handler for receiving control from this parser after the internal and/or 
 external DTD subsets are parsed, but before the document's root Element is parsed.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#closeInputStream(com.ibm.xml.parser.Source)">closeInputStream</A></B>(<A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A>&nbsp;source)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the input stream currently in use.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#getInputStream(java.lang.String, java.lang.String, java.lang.String)">getInputStream</A></B>(java.lang.String&nbsp;name,
               java.lang.String&nbsp;publicID,
               java.lang.String&nbsp;systemID)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the source of the input stream (could be a character stream or a byte stream) 
 based on the entity specified by the system ID and/or public ID, and the 
 <var>streamProducer</var> specified when this parser was constructed.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#getNumberOfErrors()">getNumberOfErrors</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of errors and exceptions currently encountered by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#getNumberOfWarnings()">getNumberOfWarnings</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of warnings currently encountered by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#getReaderBufferSize()">getReaderBufferSize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the size of this parser's character-stream-oriented input source buffer.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#loadCatalog(java.io.Reader)">loadCatalog</A></B>(java.io.Reader&nbsp;reader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Loads a catalog which provides mapping between public IDs and system IDs.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/ibm/xml/parser/DTD.html">DTD</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#readDTDStream(java.io.InputStream)">readDTDStream</A></B>(java.io.InputStream&nbsp;inputStream)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a parsed external DTD subset based on the specified <var>inputStream</var>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/ibm/xml/parser/DTD.html">DTD</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#readDTDStream(java.io.Reader)">readDTDStream</A></B>(java.io.Reader&nbsp;reader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a parsed external DTD subset based on the specified <var>reader</var>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/ibm/xml/parser/DTD.html">DTD</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#readDTDStream(com.ibm.xml.parser.Source)">readDTDStream</A></B>(<A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A>&nbsp;source)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a parsed external DTD subset based on the specified <var>source</var>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#readStream(java.io.InputStream)">readStream</A></B>(java.io.InputStream&nbsp;inputStream)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a parsed XML document based on the specified <var>inputStream</var>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#readStream(java.io.Reader)">readStream</A></B>(java.io.Reader&nbsp;reader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a parsed XML document based on the specified <var>reader</var>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#readStream(com.ibm.xml.parser.Source)">readStream</A></B>(<A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A>&nbsp;source)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a parsed XML document based on the specified <var>source</var>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setAllowJavaEncodingName(boolean)">setAllowJavaEncodingName</A></B>(boolean&nbsp;isAllowJavaEncodingName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this parser allows Java encoding names to be specified in place of
 MIME charset names on <var>xmlEncoding</var> parameters.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setElementFactory(com.ibm.xml.parser.TXDocument)">setElementFactory</A></B>(<A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A>&nbsp;elementFactory)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the code to receive control when the various components of the Document Object
 Model (DOM) and XML4J need to be created and initialized.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setEndBy1stError(boolean)">setEndBy1stError</A></B>(boolean&nbsp;isEndBy1stError)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this parser terminates processing when an initial error or exception
 occurs.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setErrorNoByteMark(boolean)">setErrorNoByteMark</A></B>(boolean&nbsp;isErrorNoByteMark)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this parser treats missing byte marks in the input stream as an error,
 and reports this condition through the defined <code>ErrorListener</code>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setExpandEntityReferences(boolean)">setExpandEntityReferences</A></B>(boolean&nbsp;isExpandEntityReferences)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether <code>EntityReference</code> Nodes are expanded by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setKeepComment(boolean)">setKeepComment</A></B>(boolean&nbsp;isKeepComment)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether <code>TXComment</code> Nodes are created by this parser when XML
 comments are encountered.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setLocale(java.util.Locale)">setLocale</A></B>(java.util.Locale&nbsp;locale)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets a locale for error and warning messages.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setPreserveSpace(boolean)">setPreserveSpace</A></B>(boolean&nbsp;isPreserveSpace)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets, at the document level, whether space is to be preserved in the parsed document.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setProcessExternalDTD(boolean)">setProcessExternalDTD</A></B>(boolean&nbsp;isProcessExternalDTD)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this parser reads an external subset of DTD, pointed in an ExternalID
 in DOCTYPE declaration.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setProcessNamespace(boolean)">setProcessNamespace</A></B>(boolean&nbsp;isProcessNamespace)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether namespaces are respected by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setReaderBufferSize(int)">setReaderBufferSize</A></B>(int&nbsp;readerBufferSize)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the size of this parser's character-stream-oriented input source buffer.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setReferenceHandler(com.ibm.xml.parser.ReferenceHandler)">setReferenceHandler</A></B>(<A HREF="../../../../com/ibm/xml/parser/ReferenceHandler.html">ReferenceHandler</A>&nbsp;referenceHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a handler for receiving control when a General Reference is recognized by 
 this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setTagHandler(com.ibm.xml.parser.TagHandler)">setTagHandler</A></B>(<A HREF="../../../../com/ibm/xml/parser/TagHandler.html">TagHandler</A>&nbsp;tagHandler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a handler for receiving control when tag start and tag end events are 
 recognized by this parser.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setWarningNoDoctypeDecl(boolean)">setWarningNoDoctypeDecl</A></B>(boolean&nbsp;isWarningNoDoctypeDecl)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this parser treats a missing DTD declaration as a warning,
 and reports this condition through the defined <code>ErrorListener</code>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setWarningNoXMLDecl(boolean)">setWarningNoXMLDecl</A></B>(boolean&nbsp;isWarningNoXMLDecl)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this parser treats a missing XML prolog PIs as a warning,
 and reports this condition through the defined <code>ErrorListener</code>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#setWarningRedefinedEntity(boolean)">setWarningRedefinedEntity</A></B>(boolean&nbsp;isWarningRedefinedEntity)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this parser treats redefined entities as a warning,
 and reports this condition through the defined <code>ErrorListener</code>.</TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../com/ibm/xml/parser/Parser.html#stop()">stop</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stops a <code>Parser.readStream()</code> operation.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" ID="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" ID="TableRowColor">
<TD><CODE>clone, 
equals, 
finalize, 
getClass, 
hashCode, 
notify, 
notifyAll, 
toString, 
wait, 
wait, 
wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->


<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" ID="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="Parser(java.lang.String)"><!-- --></A><H3>
Parser</H3>
<PRE>
public <B>Parser</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Constructor when using the default <code>ErrorListener</code> and <code>StreamProducer</code>.
 The default <code>ErrorListener</code> and <code>StreamProducer</code> are defined by
 the <code>Stderr</code> class.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - URL or filespec to use as the default input stream; if a filespec is
                  provided, this value can include a drive and directory spec.
                  This value is also used to associate a name with errors reported to the
                  default error listener that have a <var>file</var> parameter 
                  <code>=null</code>.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Stderr.html"><CODE>Stderr</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/ErrorListener.html"><CODE>ErrorListener</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/StreamProducer.html"><CODE>StreamProducer</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="Parser(java.lang.String, com.ibm.xml.parser.ErrorListener, com.ibm.xml.parser.StreamProducer)"><!-- --></A><H3>
Parser</H3>
<PRE>
public <B>Parser</B>(java.lang.String&nbsp;name,
              <A HREF="../../../../com/ibm/xml/parser/ErrorListener.html">ErrorListener</A>&nbsp;errorListener,
              <A HREF="../../../../com/ibm/xml/parser/StreamProducer.html">StreamProducer</A>&nbsp;streamProducer)</PRE>
<DL>
<DD>Constructor when NOT using the default <CODE>ErrorListener</CODE> or <CODE>StreamProducer</CODE>.
 The default <code>ErrorListener</code> and <code>StreamProducer</code> are defined by
 the <code>Stderr</code> class.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - This parameter is only used if either <var>errorListener</var> or
                  <var>streamProducer</var> are allowed to default.  If <var>streamProducer</var>
                  is allowed to default, this value is the URL or filespec to use as 
                  the default input stream; if a filespec is provided, this value can 
                  include a drive and directory spec.  If <var>errorListener</var> is
                  allowed to default, this value is used to associate a name with 
                  errors reported to the default error listener that have a 
                  <var>file</var> parameter <code>=null</code>.<DD><CODE>errorListener</CODE> - Handler for error and warning events that are recognized by this 
                  parser, or <var>null</var> if to use the default listener.<DD><CODE>streamProducer</CODE> - Mechanism for manipulating this parser's input stream, or
                  <var>null</var> if to use the default stream producer.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Stderr.html"><CODE>Stderr</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/ErrorListener.html"><CODE>ErrorListener</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/StreamProducer.html"><CODE>StreamProducer</CODE></A></DL>
</DD>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" ID="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="setLocale(java.util.Locale)"><!-- --></A><H3>
setLocale</H3>
<PRE>
public void <B>setLocale</B>(java.util.Locale&nbsp;locale)</PRE>
<DL>
<DD>Sets a locale for error and warning messages.
 <p>By default, the current user locale's resource bundle is used.  If no messages
 exist for the requested <var>locale</var>, US English messages are used.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>locale</CODE> - A Java Locale object.</DL>
</DD>
</DL>
<HR>

<A NAME="setElementFactory(com.ibm.xml.parser.TXDocument)"><!-- --></A><H3>
setElementFactory</H3>
<PRE>
public void <B>setElementFactory</B>(<A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A>&nbsp;elementFactory)</PRE>
<DL>
<DD>Sets the code to receive control when the various components of the Document Object
 Model (DOM) and XML4J need to be created and initialized.  By default, a instance of the
 <code>TXDocument</code> is used.
 <P>When this method is called, readStream() returns the <VAR>elementFactory</VAR>.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>elementFactory</CODE> - Factory to use to create and initialize objects.  This must be an instance of TXDocument or a subclass of TXDocument.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/TXDocument.html"><CODE>TXDocument</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getInputStream(java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
getInputStream</H3>
<PRE>
public <A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A> <B>getInputStream</B>(java.lang.String&nbsp;name,
                             java.lang.String&nbsp;publicID,
                             java.lang.String&nbsp;systemID)
                      throws java.io.IOException</PRE>
<DL>
<DD><p>Returns the source of the input stream (could be a character stream or a byte stream) 
 based on the entity specified by the system ID and/or public ID, and the 
 <var>streamProducer</var> specified when this parser was constructed.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name to be associated with the input stream.  For example, 
                      this name could be the public ID of an external ID, or a local filename.<DD><CODE>publicID</CODE> - Entity's public ID, or <var>null</var> if no public ID (see ExternalID for details).<DD><CODE>systemID</CODE> - Entity's system ID.<DT><B>Returns:</B><DD>The resolved source of the input stream, or <var>null</var> if unable to resolve.<DT><B>Throws:</B><DD>java.io.IOException - Thrown if unable to open the source defined by the specified IDs.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/ExternalID.html"><CODE>ExternalID</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Parser.html#closeInputStream(com.ibm.xml.parser.Source)"><CODE>closeInputStream(com.ibm.xml.parser.Source)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/StreamProducer.html#getInputStream(java.lang.String, java.lang.String, java.lang.String)"><CODE>StreamProducer.getInputStream(java.lang.String, java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="closeInputStream(com.ibm.xml.parser.Source)"><!-- --></A><H3>
closeInputStream</H3>
<PRE>
public void <B>closeInputStream</B>(<A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A>&nbsp;source)</PRE>
<DL>
<DD><p>Removes the input stream currently in use.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>source</CODE> - Source of the input stream to be closed.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Parser.html#getInputStream(java.lang.String, java.lang.String, java.lang.String)"><CODE>getInputStream(java.lang.String, java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/StreamProducer.html#closeInputStream(com.ibm.xml.parser.Source)"><CODE>StreamProducer.closeInputStream(com.ibm.xml.parser.Source)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="loadCatalog(java.io.Reader)"><!-- --></A><H3>
loadCatalog</H3>
<PRE>
public void <B>loadCatalog</B>(java.io.Reader&nbsp;reader)
                 throws java.io.IOException</PRE>
<DL>
<DD>Loads a catalog which provides mapping between public IDs and system IDs.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>reader</CODE> - Character input stream reader.<DT><B>Throws:</B><DD>java.io.IOException - Thrown if <var>reader</var> is invalid.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Parser.html#getInputStream(java.lang.String, java.lang.String, java.lang.String)"><CODE>getInputStream(java.lang.String, java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/ExternalID.html"><CODE>ExternalID</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Stderr.html#loadCatalog(java.io.Reader)"><CODE>Stderr.loadCatalog(java.io.Reader)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/StreamProducer.html#loadCatalog(java.io.Reader)"><CODE>StreamProducer.loadCatalog(java.io.Reader)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setTagHandler(com.ibm.xml.parser.TagHandler)"><!-- --></A><H3>
setTagHandler</H3>
<PRE>
public void <B>setTagHandler</B>(<A HREF="../../../../com/ibm/xml/parser/TagHandler.html">TagHandler</A>&nbsp;tagHandler)</PRE>
<DL>
<DD>Register a handler for receiving control when tag start and tag end events are 
 recognized by this parser.
 By default, no tag handler is registered to this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>tagHandler</CODE> - Handler to be registered.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/TagHandler.html"><CODE>TagHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setReferenceHandler(com.ibm.xml.parser.ReferenceHandler)"><!-- --></A><H3>
setReferenceHandler</H3>
<PRE>
public void <B>setReferenceHandler</B>(<A HREF="../../../../com/ibm/xml/parser/ReferenceHandler.html">ReferenceHandler</A>&nbsp;referenceHandler)</PRE>
<DL>
<DD>Register a handler for receiving control when a General Reference is recognized by 
 this parser.
 By default, no reference handler is registered to this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>referenceHandler</CODE> - Handler to be registered.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/ReferenceHandler.html"><CODE>ReferenceHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addPreRootHandler(com.ibm.xml.parser.PreRootHandler)"><!-- --></A><H3>
addPreRootHandler</H3>
<PRE>
public void <B>addPreRootHandler</B>(<A HREF="../../../../com/ibm/xml/parser/PreRootHandler.html">PreRootHandler</A>&nbsp;preRootHandler)</PRE>
<DL>
<DD>Register a handler for receiving control from this parser after the internal and/or 
 external DTD subsets are parsed, but before the document's root Element is parsed.
 By default, no preroot handlers are registered to this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>preRootHandler</CODE> - Handler to be registered.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/PreRootHandler.html"><CODE>PreRootHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addPIHandler(com.ibm.xml.parser.PIHandler)"><!-- --></A><H3>
addPIHandler</H3>
<PRE>
public void <B>addPIHandler</B>(<A HREF="../../../../com/ibm/xml/parser/PIHandler.html">PIHandler</A>&nbsp;piHandler)</PRE>
<DL>
<DD>Register a handler for receiving control when PIs are recognized by this parser.
 By default, no PI handlers are registered to this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>piHandler</CODE> - Handler to be registered.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/PIHandler.html"><CODE>PIHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addElementHandler(com.ibm.xml.parser.ElementHandler)"><!-- --></A><H3>
addElementHandler</H3>
<PRE>
public void <B>addElementHandler</B>(<A HREF="../../../../com/ibm/xml/parser/ElementHandler.html">ElementHandler</A>&nbsp;elementHandler)</PRE>
<DL>
<DD>Register a handler for receiving control when ANY element tag is recognized by this
 parser.
 By default, no element handlers are registered to this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>elementHandler</CODE> - Handler to be registered.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/ElementHandler.html"><CODE>ElementHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addElementHandler(com.ibm.xml.parser.ElementHandler, java.lang.String)"><!-- --></A><H3>
addElementHandler</H3>
<PRE>
public void <B>addElementHandler</B>(<A HREF="../../../../com/ibm/xml/parser/ElementHandler.html">ElementHandler</A>&nbsp;elementHandler,
                              java.lang.String&nbsp;elementTagName)</PRE>
<DL>
<DD>Register a handler for receiving control when the specified <var>elementTagName</var>
 element tag is recognized by this parser.
 By default, no element handlers are registered to this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>elementHandler</CODE> - Handler to be registered for the specified <var>elementTagName</var>.<DD><CODE>elementTagName</CODE> - Element name to be watched for by this parser.  If the 
                          Element's name has a namespace prefix, that prefix should
                          be included.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/ElementHandler.html"><CODE>ElementHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="addNoRequiredAttributeHandler(com.ibm.xml.parser.NoRequiredAttributeHandler)"><!-- --></A><H3>
addNoRequiredAttributeHandler</H3>
<PRE>
public void <B>addNoRequiredAttributeHandler</B>(<A HREF="../../../../com/ibm/xml/parser/NoRequiredAttributeHandler.html">NoRequiredAttributeHandler</A>&nbsp;noRequiredAttributeHandler)</PRE>
<DL>
<DD>Register a handler for receiving control when a "no required attribute" event is 
 recognized by this parser.  A "no required attribute" event occurs when an Element 
 is parsed and a required Attribute for this Element is not seen; Attributes are 
 declared as required as part of the internal and/or external DTD declaration of the 
 XML document.
 <p>By default, no required attribute handlers are registered to this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>noRequiredAttributeHandler</CODE> - Handler to be registered.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/NoRequiredAttributeHandler.html"><CODE>NoRequiredAttributeHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getNumberOfErrors()"><!-- --></A><H3>
getNumberOfErrors</H3>
<PRE>
public int <B>getNumberOfErrors</B>()</PRE>
<DL>
<DD>Returns the number of errors and exceptions currently encountered by this parser.
 Warning messages do not count in this number.<DD><DL>
<DT><B>Returns:</B><DD>Number of errors and exceptions encountered by this parser.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/ErrorListener.html"><CODE>ErrorListener</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getNumberOfWarnings()"><!-- --></A><H3>
getNumberOfWarnings</H3>
<PRE>
public int <B>getNumberOfWarnings</B>()</PRE>
<DL>
<DD>Returns the number of warnings currently encountered by this parser.<DD><DL>
<DT><B>Returns:</B><DD>Number of warnings encountered by this parser.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/ErrorListener.html"><CODE>ErrorListener</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setKeepComment(boolean)"><!-- --></A><H3>
setKeepComment</H3>
<PRE>
public void <B>setKeepComment</B>(boolean&nbsp;isKeepComment)</PRE>
<DL>
<DD>Sets whether <code>TXComment</code> Nodes are created by this parser when XML
 comments are encountered.
 <p>By default, <code>TXComment</code> Nodes are created by this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isKeepComment</CODE> - <code>=true</code> means maintain parsed comments; 
                          <code>=false</code> means drop comments when creating object tree.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/TXComment.html"><CODE>TXComment</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setExpandEntityReferences(boolean)"><!-- --></A><H3>
setExpandEntityReferences</H3>
<PRE>
public void <B>setExpandEntityReferences</B>(boolean&nbsp;isExpandEntityReferences)</PRE>
<DL>
<DD>Sets whether <code>EntityReference</code> Nodes are expanded by this parser.
 <p>By default, <code>EntityReference</code> Nodes are kept.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isKeepComment</CODE> - <code>=true</code> means expanding entity references;
                          <code>=false</code> means maintain entity references.<DT><B>See Also: </B><DD><A HREF="../../../../org/w3c/dom/EntityReference.html"><CODE>EntityReference</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/GeneralReference.html"><CODE>GeneralReference</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setProcessNamespace(boolean)"><!-- --></A><H3>
setProcessNamespace</H3>
<PRE>
public void <B>setProcessNamespace</B>(boolean&nbsp;isProcessNamespace)</PRE>
<DL>
<DD>Sets whether namespaces are respected by this parser.  Namespace notation can occur
 on the names of <code>TXElement, TXPI, and TXAttribute</code> Nodes.  If namespaces
 are respected, the methods defined by the <code>Namespace</code> interface will
 function properly in these Nodes.
 <p>By default, namespaces are NOT respected by this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isProcessNamespace</CODE> - <code>=true</code> means parse for namespaces; 
                              <code>=false</code> means ignore namespaces when parsing.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Namespace.html"><CODE>Namespace</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXElement.html"><CODE>TXElement</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXAttribute.html"><CODE>TXAttribute</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setAllowJavaEncodingName(boolean)"><!-- --></A><H3>
setAllowJavaEncodingName</H3>
<PRE>
public void <B>setAllowJavaEncodingName</B>(boolean&nbsp;isAllowJavaEncodingName)</PRE>
<DL>
<DD>Sets whether this parser allows Java encoding names to be specified in place of
 MIME charset names on <var>xmlEncoding</var> parameters.  The <code>MIME2Java</code>
 class is provided to facilitate conversion when Java encoding names are not allowed.
 <p>By default, Java encoding names are NOT allowed on <var>xmlEncoding</var> parameters
 by this parser.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isAllowJavaEncodingName</CODE> - <code>=true</code> means Java encoding names are allowed; 
                                  <code>=false</code> means MIME charset names must be used.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/TXDocument.html#setEncoding(java.lang.String)"><CODE>TXDocument.setEncoding(java.lang.String)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/DTD.html#setEncoding(java.lang.String)"><CODE>DTD.setEncoding(java.lang.String)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/MIME2Java.html"><CODE>MIME2Java</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setProcessExternalDTD(boolean)"><!-- --></A><H3>
setProcessExternalDTD</H3>
<PRE>
public void <B>setProcessExternalDTD</B>(boolean&nbsp;isProcessExternalDTD)</PRE>
<DL>
<DD>Sets whether this parser reads an external subset of DTD, pointed in an ExternalID
 in DOCTYPE declaration.
 <P>By default, this parser reads an external subset of DTD.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isProcessExternalDTD</CODE> - <code>=true</code> means process an external DTD;
                             <code>=false</code> means ignore an external DTD.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/DTD.html"><CODE>DTD</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setPreserveSpace(boolean)"><!-- --></A><H3>
setPreserveSpace</H3>
<PRE>
public void <B>setPreserveSpace</B>(boolean&nbsp;isPreserveSpace)</PRE>
<DL>
<DD>Sets, at the document level, whether space is to be preserved in the parsed document.  
 Regardless of the value of <var>isPreserveSpace</var>, this parser will preserve 
 whitespace.  This value is used, for example, to determine if space is to be preserved
 in Text Nodes during printWithFormat() operations.  Note that the document-level value will be 
 overridden at the Node level if this parser recognizes a <code>xml:space</code> 
 attribute.
 <p>By default, space is not to be preserved in the parsed document.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isPreserveSpace</CODE> - <code>=true</code> space is to be preserved; 
                          <code>=false</code> space is to be ignored.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/TXElement.html#setPreserveSpace(boolean)"><CODE>TXElement.setPreserveSpace(boolean)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXText.html#setIsIgnorableWhitespace(boolean)"><CODE>TXText.setIsIgnorableWhitespace(boolean)</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXDocument.html#printWithFormat(java.io.Writer)"><CODE>TXDocument.printWithFormat(java.io.Writer)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setErrorNoByteMark(boolean)"><!-- --></A><H3>
setErrorNoByteMark</H3>
<PRE>
public void <B>setErrorNoByteMark</B>(boolean&nbsp;isErrorNoByteMark)</PRE>
<DL>
<DD>Sets whether this parser treats missing byte marks in the input stream as an error,
 and reports this condition through the defined <code>ErrorListener</code>.
 <p>By default, this condition is reported by this parser as an error.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isErrorNoByteMark</CODE> - <code>=true</code> means report condition as an error; 
                              <code>=false</code> means ignore this condition.</DL>
</DD>
</DL>
<HR>

<A NAME="setWarningRedefinedEntity(boolean)"><!-- --></A><H3>
setWarningRedefinedEntity</H3>
<PRE>
public void <B>setWarningRedefinedEntity</B>(boolean&nbsp;isWarningRedefinedEntity)</PRE>
<DL>
<DD>Sets whether this parser treats redefined entities as a warning,
 and reports this condition through the defined <code>ErrorListener</code>.
 <p>By default, this condition is reported by this parser as a warning.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isWarningRedefinedEntity</CODE> - <code>=true</code> means report condition as a warning; 
                                      <code>=false</code> means ignore this condition.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/EntityDecl.html"><CODE>EntityDecl</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setWarningNoXMLDecl(boolean)"><!-- --></A><H3>
setWarningNoXMLDecl</H3>
<PRE>
public void <B>setWarningNoXMLDecl</B>(boolean&nbsp;isWarningNoXMLDecl)</PRE>
<DL>
<DD>Sets whether this parser treats a missing XML prolog PIs as a warning,
 and reports this condition through the defined <code>ErrorListener</code>.
 <p>By default, this condition is reported by this parser as a warning.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isWarningNoXMLDecl</CODE> - <code>=true</code> means report condition as a warning; 
                              <code>=false</code> means ignore this condition.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/TXPI.html"><CODE>TXPI</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setWarningNoDoctypeDecl(boolean)"><!-- --></A><H3>
setWarningNoDoctypeDecl</H3>
<PRE>
public void <B>setWarningNoDoctypeDecl</B>(boolean&nbsp;isWarningNoDoctypeDecl)</PRE>
<DL>
<DD>Sets whether this parser treats a missing DTD declaration as a warning,
 and reports this condition through the defined <code>ErrorListener</code>.
 <p>By default, this condition is NOT reported by this parser as a warning.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isWarningNoXMLDecl</CODE> - <code>=true</code> means report condition as a warning; 
                              <code>=false</code> means ignore this condition.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/DTD.html"><CODE>DTD</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setEndBy1stError(boolean)"><!-- --></A><H3>
setEndBy1stError</H3>
<PRE>
public void <B>setEndBy1stError</B>(boolean&nbsp;isEndBy1stError)</PRE>
<DL>
<DD>Sets whether this parser terminates processing when an initial error or exception
 occurs.
 <P>By default, this parser stops parsing after an error occurs, as required by
 the XML specification.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isEndBy1stError</CODE> - <code>=true</code> means initial error or exception ends processing;
                              <code>=false</code> means processing continues until document is fully parsed.</DL>
</DD>
</DL>
<HR>

<A NAME="stop()"><!-- --></A><H3>
stop</H3>
<PRE>
public void <B>stop</B>()</PRE>
<DL>
<DD>Stops a <code>Parser.readStream()</code> operation.
 The calling thread will signal that the thread executing in <code>this.readStream()</code>
 should clean up and return as soon as practical.  The calling thread will return immediately.
 The effect of <code>stop()</code> is sticky, meaning that after <code>stop()</code> has been 
 called, a thread entering readStream() will return immediately.  
 (This helps in the case where the UI thread invokes <code>stop</code> before the processing 
 thread actually enters <code>readStream</code>
 <p> <code>stop</code> affects only the specific instance of the parser (this) on which
 it is invoked.  It is not global; <code>readStream</code> on other parser instances
 will not be affected.</DL>
<HR>

<A NAME="readStream(java.io.InputStream)"><!-- --></A><H3>
readStream</H3>
<PRE>
public <A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A> <B>readStream</B>(java.io.InputStream&nbsp;inputStream)</PRE>
<DL>
<DD>Returns a parsed XML document based on the specified <var>inputStream</var>.
 The returned document can then be accessed by methods such as <code>TXDocument#getDocumentElement</code>.
 <p>Once this method is invoked, the parser instance is of no further use, and should NOT be reused.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>inputStream</CODE> - Byte-stream-oriented data source.<DT><B>Returns:</B><DD>Parsed XML document (should never be <var>null</var>).<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Source.html"><CODE>Source</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXDocument.html#getDocumentElement()"><CODE>TXDocument.getDocumentElement()</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Parser.html#readDTDStream(java.io.InputStream)"><CODE>readDTDStream(java.io.InputStream)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="readStream(java.io.Reader)"><!-- --></A><H3>
readStream</H3>
<PRE>
public <A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A> <B>readStream</B>(java.io.Reader&nbsp;reader)</PRE>
<DL>
<DD>Returns a parsed XML document based on the specified <var>reader</var>.
 The returned document can then be accessed by methods such as <code>TXDocument#getDocumentElement</code>.
 <p>Once this method is invoked, the parser instance is of no further use, and should NOT be reused.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>reader</CODE> - Character-stream-oriented data source.<DT><B>Returns:</B><DD>Parsed XML document (should never be <var>null</var>).<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Source.html"><CODE>Source</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXDocument.html#getDocumentElement()"><CODE>TXDocument.getDocumentElement()</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Parser.html#readDTDStream(java.io.InputStream)"><CODE>readDTDStream(java.io.InputStream)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="readStream(com.ibm.xml.parser.Source)"><!-- --></A><H3>
readStream</H3>
<PRE>
public <A HREF="../../../../com/ibm/xml/parser/TXDocument.html">TXDocument</A> <B>readStream</B>(<A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A>&nbsp;source)</PRE>
<DL>
<DD>Returns a parsed XML document based on the specified <var>source</var>.
 The returned document can then be accessed by methods such as <code>TXDocument#getDocumentElement</code>.
 <p>Once this method is invoked, the parser instance is of no further use, and should NOT be reused.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>source</CODE> - Byte-stream-oriented or character-stream-oriented data source.<DT><B>Returns:</B><DD>Parsed XML document (should never be <var>null</var>).<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Source.html"><CODE>Source</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/TXDocument.html#getDocumentElement()"><CODE>TXDocument.getDocumentElement()</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Parser.html#readDTDStream(java.io.InputStream)"><CODE>readDTDStream(java.io.InputStream)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="readDTDStream(java.io.InputStream)"><!-- --></A><H3>
readDTDStream</H3>
<PRE>
public <A HREF="../../../../com/ibm/xml/parser/DTD.html">DTD</A> <B>readDTDStream</B>(java.io.InputStream&nbsp;inputStream)
                  throws java.io.IOException</PRE>
<DL>
<DD>Returns a parsed external DTD subset based on the specified <var>inputStream</var>.
 The returned document can then be accessed by methods such as <code>DTD#externalElements</code>.
 <p>Once this method is invoked, the parser instance is of no further use, and should NOT be reused.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>inputStream</CODE> - Byte-stream-oriented data source.<DT><B>Returns:</B><DD>Parsed DTD (should never be <var>null</var>).<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Source.html"><CODE>Source</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/DTD.html"><CODE>DTD</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Parser.html#readStream(java.io.InputStream)"><CODE>readStream(java.io.InputStream)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="readDTDStream(java.io.Reader)"><!-- --></A><H3>
readDTDStream</H3>
<PRE>
public <A HREF="../../../../com/ibm/xml/parser/DTD.html">DTD</A> <B>readDTDStream</B>(java.io.Reader&nbsp;reader)
                  throws java.io.IOException</PRE>
<DL>
<DD>Returns a parsed external DTD subset based on the specified <var>reader</var>.
 The returned document can then be accessed by methods such as <code>DTD#externalElements</code>.
 <p>Once this method is invoked, the parser instance is of no further use, and should NOT be reused.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>reader</CODE> - Character-stream-oriented data source.<DT><B>Returns:</B><DD>Parsed DTD (should never be <var>null</var>).<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Source.html"><CODE>Source</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/DTD.html"><CODE>DTD</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Parser.html#readStream(java.io.InputStream)"><CODE>readStream(java.io.InputStream)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="readDTDStream(com.ibm.xml.parser.Source)"><!-- --></A><H3>
readDTDStream</H3>
<PRE>
public <A HREF="../../../../com/ibm/xml/parser/DTD.html">DTD</A> <B>readDTDStream</B>(<A HREF="../../../../com/ibm/xml/parser/Source.html">Source</A>&nbsp;source)
                  throws java.io.IOException</PRE>
<DL>
<DD>Returns a parsed external DTD subset based on the specified <var>source</var>.
 The returned document can then be accessed by methods such as <code>DTD#externalElements</code>.
 <p>Once this method is invoked, the parser instance is of no further use, and should NOT be reused.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>source</CODE> - Byte-stream-oriented or character-stream-oriented data source.<DT><B>Returns:</B><DD>Parsed DTD (should never be <var>null</var>).<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Source.html"><CODE>Source</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/DTD.html"><CODE>DTD</CODE></A>, 
<A HREF="../../../../com/ibm/xml/parser/Parser.html#readStream(java.io.InputStream)"><CODE>readStream(java.io.InputStream)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getReaderBufferSize()"><!-- --></A><H3>
getReaderBufferSize</H3>
<PRE>
public int <B>getReaderBufferSize</B>()</PRE>
<DL>
<DD>Returns the size of this parser's character-stream-oriented input source buffer.  
 Characters are buffered during I/O in order to provide efficient reading.  
 This method has no meaning for byte-stream-oriented input sources.<DD><DL>
<DT><B>Returns:</B><DD>Size of this parser's character-stream-oriented input buffer.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Parser.html#setReaderBufferSize(int)"><CODE>setReaderBufferSize(int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setReaderBufferSize(int)"><!-- --></A><H3>
setReaderBufferSize</H3>
<PRE>
public void <B>setReaderBufferSize</B>(int&nbsp;readerBufferSize)</PRE>
<DL>
<DD>Sets the size of this parser's character-stream-oriented input source buffer.  
 Characters are buffered during I/O in order to provide efficient reading.  
 This method has no meaning for byte-stream-oriented input sources.
 <p>The default buffer size is large enough for most purposes.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>readerBufferSize</CODE> - Size of this parser's character-stream-oriented input buffer.<DT><B>See Also: </B><DD><A HREF="../../../../com/ibm/xml/parser/Parser.html#getReaderBufferSize()"><CODE>getReaderBufferSize()</CODE></A></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" ID="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT ID="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="package-summary.html"><FONT ID="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" ID="NavBarCell1Rev"> &nbsp;<FONT ID="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="package-tree.html"><FONT ID="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT ID="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT ID="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" ID="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT ID="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
XML Parser for Java 1.1.9</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" ID="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../com/ibm/xml/parser/Parent.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../com/ibm/xml/parser/PseudoNode.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" ID="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Parser.html" TARGET="_top"><B>NO FRAMES</B></A></FONT></TD>
</TR>
<TR>
<TD VALIGN="top" ID="NavBarCell3"><FONT SIZE="-2">
  SUMMARY: &nbsp;INNER&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" ID="NavBarCell3"><FONT SIZE="-2">
DETAIL: &nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>

</BODY>
</HTML>
